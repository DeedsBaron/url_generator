// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: url_generator.proto

package url_generator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UrlGeneratorClient is the client API for UrlGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UrlGeneratorClient interface {
	// Создает новую ссылку
	CreateUrl(ctx context.Context, in *CreateUrlReq, opts ...grpc.CallOption) (*CreateUrlResponse, error)
	// Возвращает по ссылке исходную строку
	GetStringByUrl(ctx context.Context, in *GetStringByUrlRequest, opts ...grpc.CallOption) (*GetStringByUrlResponse, error)
}

type urlGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewUrlGeneratorClient(cc grpc.ClientConnInterface) UrlGeneratorClient {
	return &urlGeneratorClient{cc}
}

func (c *urlGeneratorClient) CreateUrl(ctx context.Context, in *CreateUrlReq, opts ...grpc.CallOption) (*CreateUrlResponse, error) {
	out := new(CreateUrlResponse)
	err := c.cc.Invoke(ctx, "/url_generator.UrlGenerator/CreateUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlGeneratorClient) GetStringByUrl(ctx context.Context, in *GetStringByUrlRequest, opts ...grpc.CallOption) (*GetStringByUrlResponse, error) {
	out := new(GetStringByUrlResponse)
	err := c.cc.Invoke(ctx, "/url_generator.UrlGenerator/GetStringByUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UrlGeneratorServer is the server API for UrlGenerator service.
// All implementations must embed UnimplementedUrlGeneratorServer
// for forward compatibility
type UrlGeneratorServer interface {
	// Создает новую ссылку
	CreateUrl(context.Context, *CreateUrlReq) (*CreateUrlResponse, error)
	// Возвращает по ссылке исходную строку
	GetStringByUrl(context.Context, *GetStringByUrlRequest) (*GetStringByUrlResponse, error)
	mustEmbedUnimplementedUrlGeneratorServer()
}

// UnimplementedUrlGeneratorServer must be embedded to have forward compatible implementations.
type UnimplementedUrlGeneratorServer struct {
}

func (UnimplementedUrlGeneratorServer) CreateUrl(context.Context, *CreateUrlReq) (*CreateUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUrl not implemented")
}
func (UnimplementedUrlGeneratorServer) GetStringByUrl(context.Context, *GetStringByUrlRequest) (*GetStringByUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStringByUrl not implemented")
}
func (UnimplementedUrlGeneratorServer) mustEmbedUnimplementedUrlGeneratorServer() {}

// UnsafeUrlGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UrlGeneratorServer will
// result in compilation errors.
type UnsafeUrlGeneratorServer interface {
	mustEmbedUnimplementedUrlGeneratorServer()
}

func RegisterUrlGeneratorServer(s grpc.ServiceRegistrar, srv UrlGeneratorServer) {
	s.RegisterService(&UrlGenerator_ServiceDesc, srv)
}

func _UrlGenerator_CreateUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlGeneratorServer).CreateUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/url_generator.UrlGenerator/CreateUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlGeneratorServer).CreateUrl(ctx, req.(*CreateUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlGenerator_GetStringByUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStringByUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlGeneratorServer).GetStringByUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/url_generator.UrlGenerator/GetStringByUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlGeneratorServer).GetStringByUrl(ctx, req.(*GetStringByUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UrlGenerator_ServiceDesc is the grpc.ServiceDesc for UrlGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UrlGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "url_generator.UrlGenerator",
	HandlerType: (*UrlGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUrl",
			Handler:    _UrlGenerator_CreateUrl_Handler,
		},
		{
			MethodName: "GetStringByUrl",
			Handler:    _UrlGenerator_GetStringByUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "url_generator.proto",
}
